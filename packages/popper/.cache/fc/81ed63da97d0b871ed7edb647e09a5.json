{"id":"../src/methods/defaults.js","dependencies":[{"name":"/Users/wwu/workspace/popper.js/packages/popper/.babelrc","includedInParent":true,"mtime":1549495462365},{"name":"/Users/wwu/workspace/popper.js/packages/popper/package.json","includedInParent":true,"mtime":1549496460410},{"name":"../modifiers/index","loc":{"line":1,"column":22},"parent":"/Users/wwu/workspace/popper.js/packages/popper/src/methods/defaults.js","resolved":"/Users/wwu/workspace/popper.js/packages/popper/src/modifiers/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _index = _interopRequireDefault(require(\"../modifiers/index\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overridden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass an object with the same\n * structure of the `options` object, as the 3rd argument. For example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\nvar _default = {\n  /**\n   * Popper's placement.\n   * @prop {Popper.placements} placement='bottom'\n   */\n  placement: 'bottom',\n\n  /**\n   * Set this to true if you want popper to position it self in 'fixed' mode\n   * @prop {Boolean} positionFixed=false\n   */\n  positionFixed: false,\n\n  /**\n   * Whether events (resize, scroll) are initially enabled.\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: function onCreate() {},\n\n  /**\n   * Callback called when the popper is updated. This callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: function onUpdate() {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js.\n   * @prop {modifiers}\n   */\n  modifiers: _index.default\n};\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n\nexports.default = _default;","map":{"mappings":[{"generated":{"line":8,"column":0},"source":"../src/methods/defaults.js","original":{"line":1,"column":0}},{"generated":{"line":12,"column":0},"source":"../src/methods/defaults.js","original":{"line":3,"column":0}},{"generated":{"line":28,"column":15},"source":"../src/methods/defaults.js","original":{"line":19,"column":15}},{"generated":{"line":29,"column":0},"source":"../src/methods/defaults.js","original":{"line":20,"column":2}},{"name":"placement","generated":{"line":33,"column":0},"source":"../src/methods/defaults.js","original":{"line":24,"column":2}},{"name":"placement","generated":{"line":33,"column":2},"source":"../src/methods/defaults.js","original":{"line":24,"column":2}},{"generated":{"line":33,"column":11},"source":"../src/methods/defaults.js","original":{"line":24,"column":11}},{"generated":{"line":33,"column":13},"source":"../src/methods/defaults.js","original":{"line":24,"column":13}},{"generated":{"line":33,"column":21},"source":"../src/methods/defaults.js","original":{"line":19,"column":15}},{"generated":{"line":35,"column":0},"source":"../src/methods/defaults.js","original":{"line":26,"column":2}},{"name":"positionFixed","generated":{"line":39,"column":0},"source":"../src/methods/defaults.js","original":{"line":30,"column":2}},{"name":"positionFixed","generated":{"line":39,"column":2},"source":"../src/methods/defaults.js","original":{"line":30,"column":2}},{"generated":{"line":39,"column":15},"source":"../src/methods/defaults.js","original":{"line":30,"column":15}},{"generated":{"line":39,"column":17},"source":"../src/methods/defaults.js","original":{"line":30,"column":17}},{"generated":{"line":39,"column":22},"source":"../src/methods/defaults.js","original":{"line":19,"column":15}},{"generated":{"line":41,"column":0},"source":"../src/methods/defaults.js","original":{"line":32,"column":2}},{"name":"eventsEnabled","generated":{"line":45,"column":0},"source":"../src/methods/defaults.js","original":{"line":36,"column":2}},{"name":"eventsEnabled","generated":{"line":45,"column":2},"source":"../src/methods/defaults.js","original":{"line":36,"column":2}},{"generated":{"line":45,"column":15},"source":"../src/methods/defaults.js","original":{"line":36,"column":15}},{"generated":{"line":45,"column":17},"source":"../src/methods/defaults.js","original":{"line":36,"column":17}},{"generated":{"line":45,"column":21},"source":"../src/methods/defaults.js","original":{"line":19,"column":15}},{"generated":{"line":47,"column":0},"source":"../src/methods/defaults.js","original":{"line":38,"column":2}},{"name":"removeOnDestroy","generated":{"line":52,"column":0},"source":"../src/methods/defaults.js","original":{"line":43,"column":2}},{"name":"removeOnDestroy","generated":{"line":52,"column":2},"source":"../src/methods/defaults.js","original":{"line":43,"column":2}},{"generated":{"line":52,"column":17},"source":"../src/methods/defaults.js","original":{"line":43,"column":17}},{"generated":{"line":52,"column":19},"source":"../src/methods/defaults.js","original":{"line":43,"column":19}},{"generated":{"line":52,"column":24},"source":"../src/methods/defaults.js","original":{"line":19,"column":15}},{"generated":{"line":54,"column":0},"source":"../src/methods/defaults.js","original":{"line":45,"column":2}},{"name":"onCreate","generated":{"line":60,"column":0},"source":"../src/methods/defaults.js","original":{"line":51,"column":2}},{"name":"onCreate","generated":{"line":60,"column":2},"source":"../src/methods/defaults.js","original":{"line":51,"column":2}},{"generated":{"line":60,"column":10},"source":"../src/methods/defaults.js","original":{"line":51,"column":10}},{"generated":{"line":60,"column":12},"source":"../src/methods/defaults.js","original":{"line":51,"column":12}},{"generated":{"line":60,"column":32},"source":"../src/methods/defaults.js","original":{"line":51,"column":18}},{"generated":{"line":60,"column":33},"source":"../src/methods/defaults.js","original":{"line":51,"column":20}},{"generated":{"line":60,"column":34},"source":"../src/methods/defaults.js","original":{"line":19,"column":15}},{"generated":{"line":62,"column":0},"source":"../src/methods/defaults.js","original":{"line":53,"column":2}},{"name":"onUpdate","generated":{"line":70,"column":0},"source":"../src/methods/defaults.js","original":{"line":61,"column":2}},{"name":"onUpdate","generated":{"line":70,"column":2},"source":"../src/methods/defaults.js","original":{"line":61,"column":2}},{"generated":{"line":70,"column":10},"source":"../src/methods/defaults.js","original":{"line":61,"column":10}},{"generated":{"line":70,"column":12},"source":"../src/methods/defaults.js","original":{"line":61,"column":12}},{"generated":{"line":70,"column":32},"source":"../src/methods/defaults.js","original":{"line":61,"column":18}},{"generated":{"line":70,"column":33},"source":"../src/methods/defaults.js","original":{"line":61,"column":20}},{"generated":{"line":70,"column":34},"source":"../src/methods/defaults.js","original":{"line":19,"column":15}},{"generated":{"line":72,"column":0},"source":"../src/methods/defaults.js","original":{"line":63,"column":2}},{"name":"modifiers","generated":{"line":77,"column":0},"source":"../src/methods/defaults.js","original":{"line":68,"column":2}},{"name":"modifiers","generated":{"line":77,"column":2},"source":"../src/methods/defaults.js","original":{"line":68,"column":2}},{"generated":{"line":77,"column":11},"source":"../src/methods/defaults.js","original":{"line":68,"column":11}},{"name":"modifiers","generated":{"line":77,"column":13},"source":"../src/methods/defaults.js","original":{"line":68,"column":2}},{"generated":{"line":78,"column":0},"source":"../src/methods/defaults.js","original":{"line":19,"column":15}},{"generated":{"line":79,"column":0},"source":"../src/methods/defaults.js","original":{"line":71,"column":0}},{"generated":{"line":84,"column":0},"source":"../src/methods/defaults.js","original":{"line":76,"column":0}}],"sources":{"../src/methods/defaults.js":"import modifiers from '../modifiers/index';\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overridden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass an object with the same\n * structure of the `options` object, as the 3rd argument. For example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\nexport default {\n  /**\n   * Popper's placement.\n   * @prop {Popper.placements} placement='bottom'\n   */\n  placement: 'bottom',\n\n  /**\n   * Set this to true if you want popper to position it self in 'fixed' mode\n   * @prop {Boolean} positionFixed=false\n   */\n  positionFixed: false,\n\n  /**\n   * Whether events (resize, scroll) are initially enabled.\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: () => {},\n\n  /**\n   * Callback called when the popper is updated. This callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: () => {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js.\n   * @prop {modifiers}\n   */\n  modifiers,\n};\n\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n"},"lineCount":null}},"hash":"d43c760c934f849b0646319523738baa","cacheData":{"env":{}}}