{"id":"../src/utils/isFunction.js","dependencies":[{"name":"/Users/wwu/workspace/popper.js/packages/popper/.babelrc","includedInParent":true,"mtime":1549495462365},{"name":"/Users/wwu/workspace/popper.js/packages/popper/package.json","includedInParent":true,"mtime":1549496460410}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isFunction;\n\n/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\nfunction isFunction(functionToCheck) {\n  var getType = {};\n  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\n}","map":{"mappings":[{"generated":{"line":8,"column":0},"source":"../src/utils/isFunction.js","original":{"line":1,"column":0}},{"generated":{"line":15,"column":0},"source":"../src/utils/isFunction.js","original":{"line":8,"column":15}},{"name":"isFunction","generated":{"line":15,"column":9},"source":"../src/utils/isFunction.js","original":{"line":8,"column":24}},{"generated":{"line":15,"column":19},"source":"../src/utils/isFunction.js","original":{"line":8,"column":15}},{"name":"functionToCheck","generated":{"line":15,"column":20},"source":"../src/utils/isFunction.js","original":{"line":8,"column":35}},{"generated":{"line":15,"column":35},"source":"../src/utils/isFunction.js","original":{"line":8,"column":15}},{"generated":{"line":15,"column":37},"source":"../src/utils/isFunction.js","original":{"line":8,"column":52}},{"generated":{"line":16,"column":0},"source":"../src/utils/isFunction.js","original":{"line":9,"column":2}},{"name":"getType","generated":{"line":16,"column":6},"source":"../src/utils/isFunction.js","original":{"line":9,"column":8}},{"generated":{"line":16,"column":13},"source":"../src/utils/isFunction.js","original":{"line":9,"column":15}},{"generated":{"line":16,"column":16},"source":"../src/utils/isFunction.js","original":{"line":9,"column":18}},{"generated":{"line":16,"column":18},"source":"../src/utils/isFunction.js","original":{"line":9,"column":2}},{"generated":{"line":17,"column":0},"source":"../src/utils/isFunction.js","original":{"line":10,"column":2}},{"name":"functionToCheck","generated":{"line":17,"column":9},"source":"../src/utils/isFunction.js","original":{"line":11,"column":4}},{"generated":{"line":17,"column":24},"source":"../src/utils/isFunction.js","original":{"line":11,"column":19}},{"name":"getType","generated":{"line":17,"column":28},"source":"../src/utils/isFunction.js","original":{"line":12,"column":4}},{"generated":{"line":17,"column":35},"source":"../src/utils/isFunction.js","original":{"line":12,"column":11}},{"name":"toString","generated":{"line":17,"column":36},"source":"../src/utils/isFunction.js","original":{"line":12,"column":12}},{"generated":{"line":17,"column":44},"source":"../src/utils/isFunction.js","original":{"line":12,"column":4}},{"name":"call","generated":{"line":17,"column":45},"source":"../src/utils/isFunction.js","original":{"line":12,"column":21}},{"generated":{"line":17,"column":49},"source":"../src/utils/isFunction.js","original":{"line":12,"column":4}},{"name":"functionToCheck","generated":{"line":17,"column":50},"source":"../src/utils/isFunction.js","original":{"line":12,"column":26}},{"generated":{"line":17,"column":65},"source":"../src/utils/isFunction.js","original":{"line":12,"column":4}},{"generated":{"line":17,"column":71},"source":"../src/utils/isFunction.js","original":{"line":12,"column":47}},{"generated":{"line":17,"column":90},"source":"../src/utils/isFunction.js","original":{"line":10,"column":2}},{"generated":{"line":18,"column":0},"source":"../src/utils/isFunction.js","original":{"line":14,"column":1}}],"sources":{"../src/utils/isFunction.js":"/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\nexport default function isFunction(functionToCheck) {\n  const getType = {};\n  return (\n    functionToCheck &&\n    getType.toString.call(functionToCheck) === '[object Function]'\n  );\n}\n"},"lineCount":null}},"hash":"402bc90d2167603447f1ec5ba6371ce6","cacheData":{"env":{}}}