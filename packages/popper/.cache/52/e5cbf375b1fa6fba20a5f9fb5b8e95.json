{"id":"../src/methods/placements.js","dependencies":[{"name":"/Users/wwu/workspace/popper.js/packages/popper/.babelrc","includedInParent":true,"mtime":1549495462365},{"name":"/Users/wwu/workspace/popper.js/packages/popper/package.json","includedInParent":true,"mtime":1549496460410}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/**\n * List of accepted placements to use as values of the `placement` option.<br />\n * Valid placements are:\n * - `auto`\n * - `top`\n * - `right`\n * - `bottom`\n * - `left`\n *\n * Each placement can have a variation from this list:\n * - `-start`\n * - `-end`\n *\n * Variations are interpreted easily if you think of them as the left to right\n * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n * is right.<br />\n * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n *\n * Some valid examples are:\n * - `top-end` (on top of reference, right aligned)\n * - `right-start` (on right of reference, top aligned)\n * - `bottom` (on bottom, centered)\n * - `auto-end` (on the side with more space available, alignment depends by placement)\n *\n * @static\n * @type {Array}\n * @enum {String}\n * @readonly\n * @method placements\n * @memberof Popper\n */\nvar _default = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];\nexports.default = _default;","map":{"mappings":[{"generated":{"line":8,"column":0},"source":"../src/methods/placements.js","original":{"line":1,"column":0}},{"generated":{"line":39,"column":15},"source":"../src/methods/placements.js","original":{"line":32,"column":15}},{"generated":{"line":39,"column":16},"source":"../src/methods/placements.js","original":{"line":33,"column":2}},{"generated":{"line":39,"column":28},"source":"../src/methods/placements.js","original":{"line":32,"column":15}},{"generated":{"line":39,"column":30},"source":"../src/methods/placements.js","original":{"line":34,"column":2}},{"generated":{"line":39,"column":36},"source":"../src/methods/placements.js","original":{"line":32,"column":15}},{"generated":{"line":39,"column":38},"source":"../src/methods/placements.js","original":{"line":35,"column":2}},{"generated":{"line":39,"column":48},"source":"../src/methods/placements.js","original":{"line":32,"column":15}},{"generated":{"line":39,"column":50},"source":"../src/methods/placements.js","original":{"line":36,"column":2}},{"generated":{"line":39,"column":61},"source":"../src/methods/placements.js","original":{"line":32,"column":15}},{"generated":{"line":39,"column":63},"source":"../src/methods/placements.js","original":{"line":37,"column":2}},{"generated":{"line":39,"column":68},"source":"../src/methods/placements.js","original":{"line":32,"column":15}},{"generated":{"line":39,"column":70},"source":"../src/methods/placements.js","original":{"line":38,"column":2}},{"generated":{"line":39,"column":79},"source":"../src/methods/placements.js","original":{"line":32,"column":15}},{"generated":{"line":39,"column":81},"source":"../src/methods/placements.js","original":{"line":39,"column":2}},{"generated":{"line":39,"column":94},"source":"../src/methods/placements.js","original":{"line":32,"column":15}},{"generated":{"line":39,"column":96},"source":"../src/methods/placements.js","original":{"line":40,"column":2}},{"generated":{"line":39,"column":103},"source":"../src/methods/placements.js","original":{"line":32,"column":15}},{"generated":{"line":39,"column":105},"source":"../src/methods/placements.js","original":{"line":41,"column":2}},{"generated":{"line":39,"column":116},"source":"../src/methods/placements.js","original":{"line":32,"column":15}},{"generated":{"line":39,"column":118},"source":"../src/methods/placements.js","original":{"line":42,"column":2}},{"generated":{"line":39,"column":130},"source":"../src/methods/placements.js","original":{"line":32,"column":15}},{"generated":{"line":39,"column":132},"source":"../src/methods/placements.js","original":{"line":43,"column":2}},{"generated":{"line":39,"column":140},"source":"../src/methods/placements.js","original":{"line":32,"column":15}},{"generated":{"line":39,"column":142},"source":"../src/methods/placements.js","original":{"line":44,"column":2}},{"generated":{"line":39,"column":156},"source":"../src/methods/placements.js","original":{"line":32,"column":15}},{"generated":{"line":39,"column":158},"source":"../src/methods/placements.js","original":{"line":45,"column":2}},{"generated":{"line":39,"column":168},"source":"../src/methods/placements.js","original":{"line":32,"column":15}},{"generated":{"line":39,"column":170},"source":"../src/methods/placements.js","original":{"line":46,"column":2}},{"generated":{"line":39,"column":176},"source":"../src/methods/placements.js","original":{"line":32,"column":15}},{"generated":{"line":39,"column":178},"source":"../src/methods/placements.js","original":{"line":47,"column":2}},{"generated":{"line":39,"column":190},"source":"../src/methods/placements.js","original":{"line":32,"column":15}}],"sources":{"../src/methods/placements.js":"/**\n * List of accepted placements to use as values of the `placement` option.<br />\n * Valid placements are:\n * - `auto`\n * - `top`\n * - `right`\n * - `bottom`\n * - `left`\n *\n * Each placement can have a variation from this list:\n * - `-start`\n * - `-end`\n *\n * Variations are interpreted easily if you think of them as the left to right\n * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n * is right.<br />\n * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n *\n * Some valid examples are:\n * - `top-end` (on top of reference, right aligned)\n * - `right-start` (on right of reference, top aligned)\n * - `bottom` (on bottom, centered)\n * - `auto-end` (on the side with more space available, alignment depends by placement)\n *\n * @static\n * @type {Array}\n * @enum {String}\n * @readonly\n * @method placements\n * @memberof Popper\n */\nexport default [\n  'auto-start',\n  'auto',\n  'auto-end',\n  'top-start',\n  'top',\n  'top-end',\n  'right-start',\n  'right',\n  'right-end',\n  'bottom-end',\n  'bottom',\n  'bottom-start',\n  'left-end',\n  'left',\n  'left-start',\n];\n"},"lineCount":null}},"hash":"ae4f5711eae6ee34ad699992d1460a5c","cacheData":{"env":{}}}