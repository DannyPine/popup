import getOffsetParent from './getOffsetParent';
import getScrollParent from './getScrollParent';
import getOffsetRect from './getOffsetRect';
import getPosition from './getPosition';
import getOffsetRectRelativeToCustomParent from './getOffsetRectRelativeToCustomParent';

/**
 * Computed the boundaries limits and return them
 * @method
 * @memberof Popper.Utils
 * @param {Object} data - Object containing the property "offsets" generated by `_getOffsets`
 * @param {Number} padding - Boundaries padding
 * @param {Element} boundariesElement - Element used to define the boundaries
 * @returns {Object} Coordinates of the boundaries
 */
export default function getBoundaries(popper, padding, boundariesElement) {
    // NOTE: 1 DOM access here
    let boundaries = {};
    const offsetParent = getOffsetParent(popper);
    const scrollParent = getScrollParent(popper);

    if (boundariesElement === 'window') {
        // WINDOW
        const body = window.document.body;
        const html = window.document.documentElement;
        const height = Math.max( body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight );
        const width = Math.max( body.scrollWidth, body.offsetWidth, html.clientWidth, html.scrollWidth, html.offsetWidth );

        boundaries = {
            top: 0,
            right: width,
            bottom: height,
            left: 0
        };
    } else if (boundariesElement === 'viewport') {
        // VIEWPORT
        const offsetParentRect = getOffsetRect(offsetParent);
        const position = getPosition(popper);

        if (position === 'fixed') {
            boundaries = {
                top: 0,
                right: window.document.documentElement.clientWidth,
                bottom: window.document.documentElement.clientHeight,
                left: 0,
            }
        } else {
            boundaries = {
                top: 0 - offsetParentRect.top,
                right: window.document.documentElement.clientWidth - offsetParentRect.left,
                bottom: window.document.documentElement.clientHeight - offsetParentRect.top,
                left: 0 - offsetParentRect.left
            };
        }

    } else if (scrollParent === boundariesElement || boundariesElement === 'scrollParent') {
        // SCROLL PARENT IS BOUNDARIES ELEMENT
        boundaries = getOffsetRectRelativeToCustomParent(scrollParent, offsetParent);
    } else {
        // BOUNDARIES ELEMENT
        boundaries = getOffsetRect(boundariesElement);
    }

    if (offsetParent.contains(scrollParent)) {
        const { scrollLeft, scrollTop } = scrollParent;
        boundaries.right += scrollLeft;
        boundaries.bottom += scrollTop;
    }

    // Add paddings
    boundaries.left += padding;
    boundaries.top += padding;
    boundaries.right -= padding;
    boundaries.bottom -= padding;

    return boundaries;
}
